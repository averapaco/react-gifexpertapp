{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","value","type","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAI,eACRN,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAACW,GACb,MAAM,CAAET,GAAR,mBAAsBS,OAExBR,EAAc,MAKhB,SACE,uBACES,KAAK,OACLD,MAAOT,EACPW,SApBmB,SAACR,GACxBF,EAAcE,EAAES,OAAOH,a,+BCRdI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAGrCX,QAAQC,IAAIgB,EAAKd,QAXI,kBAYbc,GAZa,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAClC,OACE,sBAAKc,UAAU,yBAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAAe,ECAZ,SAACA,GAAe,IAAD,EACff,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH8B,mBAClCC,EADkC,KAC3BC,EAD2B,KAoBzC,OAdAC,qBAAU,WACRxB,EAAQC,GACPwB,MAAK,SAAAC,GAAI,OACRC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEJ,CAACpB,IAIGqB,EDjBiBM,CAAa3B,GAA9BoB,EAH+B,EAG/BA,QAASb,EAHsB,EAGtBA,KAEhB,OACE,qCACE,mBAAGS,UAAU,oBAAb,SAAkChB,IAChCoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEIT,EAAKE,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEXrBiB,EAAe,WAAO,IAAD,EAEI3C,mBAAS,CAAC,cAFd,mBAEzB4C,EAFyB,KAEb7C,EAFa,KAIhC,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEE6C,EAAWpB,KAAI,SAAAT,GACb,OAAO,cAAC,EAAD,CAAyBA,UAAWA,GAAtBA,U,MCT/B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c903ae4f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('');\n\n  const hadleInputChange = (e) => {\n    setInputValue(e.target.value);    \n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Submit echo');\n    if (inputValue.trim().length > 2) {\n      setCategories((value) => {\n        return [inputValue,...value];\n      });\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={hadleInputChange}\n      />\n    </form>\n  )   \n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}","export const getGifs = async(categoria) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=iCo216ChLYmawd0CrumOASEvbcl3WMP7`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  });\n  console.log(gifs.length);\n  return (gifs);\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n  return (\n    <div className=\"card animate__bounceIn\">\n      <img src={url} alt={title} ></img>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport {GifGridItem} from './GifGridItem'\nexport const GifGrid = ({categoria}) => {\n\n\n  const {loading, data} = useFetchGifs(categoria);\n\n  return (\n    <>\n      <p className=\"animate__fadeInUp\">{categoria}</p>\n      { loading && <p>Loading</p>}\n      <div className=\"card-grid\">\n        {\n          data.map((img) => (\n            <GifGridItem key={img.id} {...img}></GifGridItem>\n          ))\n        }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (categoria) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(categoria)\n    .then(imgs => (\n      setTimeout(() => {\n        setState({\n          data: imgs,\n          loading: false,\n        })\n      }, 1000)\n    ))\n  }, [categoria])\n\n  \n\n  return state;\n\n}\n","import React, { Fragment, useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <Fragment>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} ></AddCategory>\n      <hr/>\n      {\n        categories.map(categoria => {\n          return <GifGrid key={categoria} categoria={categoria} ></GifGrid>\n        })\n      }\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}